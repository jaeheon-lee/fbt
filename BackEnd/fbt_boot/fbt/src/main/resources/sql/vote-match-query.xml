<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="VoteMatchMapper">
	<!-- V001 : 진행 중인 투표 출력 -->
	<!-- 정보를 받기 위한 RM -->
	<resultMap type="voteMatch" id="VoteMatchRM">
		<id column="vote_match_id" property="voteMatchId"/>
		<result column="vote_reg_date" property="voteRegDate"/>
		<result column="due_date" property="dueDate"/>
		<result column="contents" property="contents"/>
		<result column="total_num" property="totalNum"/>
		<result column="voted_num" property="votedNum"/>
		<result column="abscent_num" property="abscentNum"/>
		<result column="attend_num" property="attendNum"/>
		<result column="friend_num" property="friendNum"/>
		<association property="matchSchedule" javaType="matchSchedule">
			<result column="start_time" property="startTime"/>
			<result column="duration" property="duration"/>
			<result column="stadium_address" property="stadiumAddress"/>
			<result column="match_type" property="matchType"/>
			<result column="cost" property="cost"/>
			<result column="stadium_parking" property="stadiumParking"/>
		</association>
		<association property="voteMatchSetting" javaType="voteMatchSetting">
			<result column="type" property="type"/>
			<result column="friend_emp" property="friendEmp"/>
		</association>
		<association property="team" javaType="team">
			<result column="team_name" property="teamName"/>
			<result column="emblem" property="emblem"/>
		</association>
	</resultMap>
	
	<!-- 진행 중인 투표 관련 일정 | 팀 정보 -->
	<select id="showVoteMatchInfoByTeam" parameterType="Integer" resultMap="VoteMatchRM" >
		SELECT 
		v.vote_match_id, v.vote_reg_date, v.due_date,  
		m.start_time, m.duration, m.stadium_address, m.match_type,
		m.cost, m.stadium_parking, m.content, m.home_team_id,
		vs.type, vs.friend_emp,
		t.emblem, t.team_name, t.team_id
		FROM match_schedule m
		JOIN vote_match v
		ON m.match_schedule_id = v.match_schedule_id
		JOIN vote_match_setting vs
		ON vs.vote_match_id = v.vote_match_id
		JOIN team t 
		ON m.home_team_id = t.team_id
		WHERE t.team_id = #{value}
		AND v.vote_status =0
	</select>
	
	<!-- 진행 중인 투표의 인원 정보 -->
	<select id="showVoteMatchNumByVote" parameterType="integer" resultMap="VoteMatchRM">
		SELECT 
		vr.vote_match_id,
		count(if(vr.team_member_id > 0, 1, null)) voted_num,
		count(if(vr.attendance > 0 and team_member_id > 0, 1, null)) attend_num, 
		count(if(vr.attendance = 0 and team_member_id > 0, 1, null)) abscent_num, 
		count(vr.email) friend_num,
		tm.total_num
		FROM vote_match_result vr
		JOIN vote_match v
		ON vr.vote_match_id = v.vote_match_id
		JOIN(
		SELECT 
		team_id, count(team_member_id) total_num
		FROM team_member
		WHERE team_id = #{value}
		) tm
		ON v.team_id = tm.team_id
		GROUP BY vr.vote_match_id
	</select>
	
	<!-- V002 : 투표 수정하기 -->
	<update id="updateVoteMatchResult" parameterType="voteMatchResult">
		UPDATE vote_match_result
		SET attendance = #{attendance}
		WHERE vote_match_id = #{voteMatchId}
		AND (team_member_id = #{teamMember.teamMemberId}
		OR email = #{user.email})
	</update>
	
	<!-- V003 : 참불 입력하기 -->
	<insert id="addAttendance" parameterType="voteMatchResult">
		INSERT INTO
		<if test="teamMember != null">
			vote_match_result(vote_match_id, team_member_id, attendance)
			VALUES(#{voteMatchId}, #{teamMember.teamMemberId}, #{attendance})
		</if>
		<if test="user != null">
			vote_match_result(vote_match_id, email, attendance)
			VALUES(#{voteMatchId}, #{user.email}, #{attendance})
		</if>
		
	</insert>
	
	<!-- V004 : 지인초청하기 -->
	<insert id="inviteFriend" parameterType="invite">
		INSERT INTO
		invite(team_member_id, email, vote_match_id)
		VALUES(#{teamMember.teamMemberId}, #{user.email}, #{voteMatch.voteMatchId})
	</insert>

	<!-- V005 : 투표 생성하기 -->
	<insert id="addVoteMatch" parameterType="voteMatch">
		INSERT INTO
		vote_match(vote_match_id, contents, due_date, vote_status, vote_reg_date, writer, team_id, match_schedule_id)
		VALUES(#{voteMatchId}, #{contents}, #{dueDate}, 0, sysdate(), #{writer}, #{team.teamId}, 
		#{matchSchedule.matchScheduleId})
	</insert>
	
	<!-- V006 : 투표 설정 등록 -->
	<insert id="addVoteMatchSetting" parameterType="voteMatchSetting">
		INSERT INTO 
		vote_match_setting(vote_match_id, type, cancel_number, is_first, waiting, friend_emp, self_min_number, 
		self_max_number, emp_due_date, emp_min_number, away_min_number, away_due_date, assign_cost, emp_cost, search_cost)
		VALUES(#{voteMatchId}, #{type}, #{cancelNumber}, #{isFirst}, #{waiting}, #{friendEmp}, #{selfMinNumber},
		#{selfMaxNumber}, #{empDueDate}, #{empMinNumber}, #{awayMinNumber}, #{awayDueDate}, #{assignCost}, 
		#{empCost}, #{searchCost})
	</insert>
	
	<!-- V007 : 투표 마감하기 -->
	<update id="endVoteMatch" parameterType="voteMatch">
		UPDATE vote_match
		SET vote_status = 1
		WHERE vote_match_id = #{voteMatchId}
	</update>
	
	<!-- V008 : 투표 내용 수정 -->
	<update id="updateVoteMatch" parameterType="voteMatch">
		UPDATE vote_match
		SET contents = #{contents}, due_date = #{dueDate}
		WHERE vote_match_id = #{voteMatchId}
	</update>
	
	<!-- V009 : 투표 삭제 -->
	<delete id="deleteVoteMatch" parameterType="string">
		DELETE FROM vote_match
		WHERE vote_match_id = #{value}
	</delete>
	
	<!-- V010 : 투표 설정 수정 -->
	<update id="updateVoteMatchSetting" parameterType="voteMatchSetting">
		UPDATE vote_match_setting
		SET type = #{type}, cancel_number = #{cancelNumber}, is_first = #{isFirst}, waiting = #{waiting}, 
		friend_emp = #{friendEmp}, self_min_number = #{selfMinNumber}, self_max_number = #{selfMaxNumber},
		emp_due_date = #{empDueDate}, emp_min_number = #{empMinNumber}, away_min_number = #{awayMinNumber},
		away_due_date = #{awayDueDate}, assign_cost = #{assignCost}, emp_cost = #{empCost}, search_cost = #{searchCost}
		WHERE vote_match_id = #{voteMatchId}
	</update>
	
	<!-- V011: 투표 결과 삭제 -->
	<delete id="deleteVoteMatchResult" parameterType="voteMatchResult">
		DELETE FROM vote_match_result
		WHERE vote_match_id = #{voteMatchId}
		AND email = #{user.email}
	</delete>
	
</mapper>