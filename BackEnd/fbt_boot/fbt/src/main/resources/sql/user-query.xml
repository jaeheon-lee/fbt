<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">
	
	<!-- U001 -->
	<insert id="addUser" parameterType="user">
		INSERT INTO
		user(email, pass, name, phone_num, user_reg_date, recent_login,
		 main_foot, position, height, weight, was_pro, gender, born_date, area, api_key, api_type)
		VALUES(#{email}, #{pass}, #{name}, #{phoneNum}, sysdate(), sysdate(),
		#{mainFoot},#{position}, #{height}, #{weight}, #{wasPro},
		#{gender}, #{bornDate}, #{area}, #{apiKey}, #{apiType})
	</insert>
	
	<!-- U002 -->
	<select id="checkDuple" parameterType="string" resultType="string">
		SELECT
		email
		FROM user
		WHERE email = #{value}
	</select>
	
	<!-- U003 -->
	<resultMap type="user" id="UserRM">
		<id column="email" property="email"/>
		<result column="name" property="name"/>
		<result column="phone_num" property="phoneNum"/>
		<result column="user_reg_date" property="userRegDate"/>
		<result column="recent_login" property="recentLogin"/>
		<result column="main_foot" property="mainFoot"/>
		<result column="position" property="position"/>
		<result column="height" property="height"/>
		<result column="weight" property="weight"/>
		<result column="was_pro" property="wasPro"/>
		<result column="gender" property="gender"/>
		<result column="born_date" property="bornDate"/>
		<result column="area" property="area"/>
		<result column="image" property="image"/>
		<result column="emp_ability" property="empAbility"/>
		<result column="emp_manner" property="empManner"/>
		<result column="total_emp_attend" property="totalEmpAttend"/>
		<collection property="teamMembers" javaType="list" ofType="teamMember">
			<id column="team_member_id" property="teamMemberId"/>
			<result column="nick_name" property="nickName"/>
			<result column="member_level" property="memberLevel"/>
			<association property="team" javaType="team">
				<id column="team_id" property="teamId"/>
				<result column="team_name" property="teamName"/>
			</association>
		</collection>
		<collection property="empScores" javaType="list" ofType="empScore">
			<id column="emp_score_id" property="empScoreId"/>
			<result column="manner_promise" property="mannerPromise"/>
			<result column="manner_contact" property="mannerContact"/>
			<result column="manner_rule" property="mannerRule"/>
			<result column="manner_body_fight" property="mannerBodyFight"/>
			<result column="manner_slang" property="mannerSlang"/>
			<result column="manner_smoking" property="mannerSmoking"/>
			<result column="manner_uniform" property="mannerUniform"/>
			<result column="manner_payment" property="mannerPayment"/>
			<result column="manner_arrangement" property="mannerArrangement"/>
			<result column="manner_referee" property="mannerReferee"/>
			<result column="manner_tackle" property="mannerTackle"/>
			<result column="forward" property="forward"/>
			<result column="middle" property="middle"/>
			<result column="defence" property="defence"/>
		</collection>
	</resultMap>
	<sql id="Login">
		SELECT
		u.email, u.image, u.name, u.image,
		t.team_id, t.team_name,
		tm.team_member_id, tm.nick_name, tm.member_level
		FROM user u
		LEFT OUTER JOIN team_member tm
		ON u.email = tm.email
		LEFT OUTER JOIN team t
		ON t.team_id = tm.team_id
	</sql>
	<!-- U003-1 -->
	<select id="LoginByApi" parameterType="hashMap" resultMap="UserRM">
		<include refid="Login"/>
		WHERE u.api_type = #{apiType}
		AND u.api_key = #{apiKey}
	</select>
	<!-- U003-2 -->
	<select id="LoginByEmail" parameterType="hashMap" resultMap="UserRM">
		<include refid="Login"/>
		WHERE u.email = #{email}
		<if test="pass != null">
			AND u.pass = #{pass}
		</if>
	</select>
	
	<!-- U004: 회원정보출력 -->
	<select id="showUserInfo" parameterType="string" resultMap="UserRM">
		SELECT
		u.email, u.name, u.phone_num, u.user_reg_date, u.recent_login, u.main_foot, u.position, u.height, u.image,
		u.weight, u.was_pro, u.gender, u.born_date, u.area, u.image, u.api_key, u.api_type, u.emp_ability, u.emp_manner,
		es.emp_score_id, es.emp_email, es.manner_promise, es.manner_contact, es.manner_rule, es.manner_body_fight, es.manner_slang, 
		es.manner_smoking, es.manner_uniform, es.manner_payment,
		es.manner_arrangement, es.manner_referee, es.manner_tackle, es.forward, es.middle, es.defence,
		ent.total_emp_attend
		FROM user u
		LEFT OUTER JOIN emp_score es
		ON u.email = es.emp_email
		LEFT OUTER JOIN (
			SELECT 
			email, count(entry_id) total_emp_attend
			FROM entry
			WHERE email = #{value}
			GROUP BY email
		) ent
		ON u.email = ent.email
		WHERE u.email = #{value}
	</select>
	<!-- U005: 용병으로서 받은 점수 -->
	<resultMap type="empScore" id="empScoreRM">
		<id column="emp_score_id" property="empScoreId"/>
		<result column="manner_promise" property="mannerPromise"/>
		<result column="manner_contact" property="mannerContact"/>
		<result column="manner_rule" property="mannerRule"/>
		<result column="manner_body_fight" property="mannerBodyFight"/>
		<result column="manner_slang" property="mannerSlang"/>
		<result column="manner_smoking" property="mannerSmoking"/>
		<result column="manner_uniform" property="mannerUniform"/>
		<result column="manner_payment" property="mannerPayment"/>
		<result column="manner_arrangement" property="mannerArrangement"/>
		<result column="manner_referee" property="mannerReferee"/>
		<result column="manner_tackle" property="mannerTackle"/>
		<result column="forward" property="forward"/>
		<result column="middle" property="middle"/>
		<result column="defence" property="defence"/>
		<association property="teamGiver" javaType="team">
			<id column="team_id" property="teamId"/>
			<result column="team_name" property="teamName"/>
		</association>
	</resultMap>
	<select id="showEmpScore" parameterType="hashMap" resultMap="empScoreRM">
		SELECT
		es.emp_score_id, es.manner_promise, es.manner_contact, es.manner_rule, es.manner_body_fight, es.manner_slang, 
		es.manner_smoking, es.manner_uniform, es.manner_payment,
		es.manner_arrangement, es.manner_referee, es.manner_tackle, es.forward, es.middle, 
		es.defence, es.emp_email,
		t.team_id, t.team_name
		FROM emp_score es
		JOIN team t
		On t.team_id = es.team_giver_id
		WHERE match_schedule_id = #{matchScheduleId}
		AND emp_email = #{email}
	</select>
	
	<!-- U006: 자신이 속한 팀 가져오기 -->
	<select id="showBelongedTeam" parameterType="string" resultType="team">
		SELECT
		t.team_id, t.team_name, t.emblem
		FROM team t
		JOIN team_member tm
		ON t.team_id = tm.team_id
		WHERE tm.email = #{value}
	</select>
	
	<!-- U007: 비밀번호 가져오기 -->
	<select id="getPass" parameterType="string" resultType="string">
		SELECT
		pass
		FROM user
		WHERE email = #{value}
	</select>
	
	<!-- U008: 회원 정보 수정 -->
	<update id="updateUser" parameterType="user">
		UPDATE `user`
		SET
		<if test="pass != null">
		`pass` = #{pass},
		</if>
		`name` = #{name},
		`phone_num` = #{phoneNum},
		`main_foot` = #{mainFoot},
		`position` = #{position},
		`height` = #{height},
		`weight` = #{weight},
		`was_pro` = #{wasPro},
		`gender` = #{gender},
		`born_date` = #{bornDate},
		`area` = #{area},
		`image` = #{image}
		WHERE `email` = #{email}
	</update>
	
	<!-- V04-1: 지인 찾기 -->
	<select id="searchFriend" parameterType="hashMap" resultType="user">
		SELECT u.email, u.name
		FROM user u
		WHERE not exists (
			SELECT distinct email
			FROM team_member tm
			WHERE u.email = tm.email
			AND team_id = #{teamId}
		)
		AND u.email like '%${email}%'
	</select>
</mapper>