<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MatchScheduleMapper">
	<!-- S001 -->
	<select id="showMatchScheduleById" parameterType="integer" resultMap="matchScheduleRM">
		SELECT
		<include refid="matchScheduleColumn"/>
		FROM match_schedule m
		WHERE m.match_schedule_id = #{value}
	</select>
	<!-- S002: 방금 등록된 일정 ID 출력 -->
	<select id="showLatestMatchScheduleIdById" parameterType="integer" resultType="integer">
		SELECT
		match_schedule_id
		FROM match_schedule 
		WHERE home_team_id = #{value} 
		OR away_team_id = #{value}
		ORDER BY match_schedule_id DESC 
		limit 1;
	</select>

	<!-- S003: 일정 등록 -->
	<insert id="addMatchSchedule" parameterType="matchSchedule">
		INSERT INTO
		match_schedule(home_team_id, away_team_id, start_time, duration, cost, writer, reg_date, 
		content, stadium_name, stadium_type, stadium_address, stadium_x, stadium_y, stadium_parking, 
		stadium_shower, match_type)
		VALUES(#{homeTeam.teamId}, #{awayTeam.teamId},#{startTime}, #{duration}, #{cost}, #{writer},
		sysdate(), #{content}, #{stadiumName}, #{stadiumType}, #{stadiumAddress}, #{stadiumX}, #{stadiumY},
		#{stadiumParking}, #{stadiumShower}, #{matchType})
	</insert>
	
	<!-- S004: awayTeam 등록 -->
	<update id="addAwayTeam" parameterType="hashMap">
		UPDATE match_schedule
		SET away_team_id = #{takerTeamId},
		is_confirmed = 1
		WHERE match_schedule_id = #{matchScheduleId}
	</update>
	
	<!-- S005-1: 등록된 팀 경기 일정 기간 별 출력 -->
	<select id="showMatchSchduleByTeamPeriod" parameterType="searchKey" resultMap="matchScheduleRM">
		SELECT
		<include refid="matchScheduleColumn"/>,
		<include refid="awayTeamColumn"/>
		FROM match_schedule m
		LEFT OUTER JOIN team t2
		ON m.away_team_id = t2.team_id
		WHERE (m.home_team_id = #{teamId} OR m.away_team_id = #{teamId})
		AND (m.start_time >= #{startTime} 
		AND  date_add(#{endTime}, interval +1 day)>= m.start_time)
		AND m.is_confirmed = 1
	</select>
	<!-- S005-2: 등록된 개인 경기 일정 기간 별 출력 -->
	<!-- 1. 자신이 속한 팀의 모든 경기 일정 -->
	<select id="showMatchSchduleByUserPeriod" parameterType="hashMap" resultMap="matchScheduleRM">
		SELECT
		distinct m.match_schedule_id, m.start_time, m.match_type,
		m.home_team_id, m.away_team_id
		FROM team_member tm
		JOIN team t
		ON t.team_id = tm.team_id
		JOIN match_schedule m
		ON (m.home_team_id = t.team_id or m.away_team_id = t.team_id)
		WHERE tm.email = #{email}
		AND (start_time >= #{startTime} 
		AND date_add(#{endTime}, interval +1 day) >= start_time)
		AND is_confirmed = 1
	</select>
	<!-- 2. 용병으로 뛰고 있는 모든 경기 일정 -->
	<select id="showMatchScheduleByEmployPeriod" parameterType="hashMap" resultMap="matchScheduleRM">
		SELECT
		m.match_schedule_id, m.start_time, m.match_type,
		m.home_team_id, m.away_team_id
		FROM match_schedule m
		JOIN employ e
		ON e.match_schedule_id = m.match_schedule_id
		JOIN employ_result er
		ON e.employ_id = er.employ_id
		WHERE er.email = #{email}
		AND er.emp_result_status = 2
		AND (start_time >= #{startTime} 
		AND date_add(#{endTime}, interval +1 day) >= start_time)
		AND is_confirmed = 1
	</select>
	<!-- 3. 지인으로 뛰고 있는 모든 경기 일정 -->
	<select id="showMatchScheduleByFriendPeriod" parameterType="string" resultMap="matchScheduleRM">
		SELECT
		m.match_schedule_id, m.start_time, m.match_type,
		m.home_team_id, m.away_team_id
		FROM match_schedule m
		JOIN vote_match v
		ON v.match_schedule_id = m.match_schedule_id
		JOIN vote_match_result vr
		ON v.vote_match_id = vr.vote_match_id
		WHERE vr.email = #{email}
		AND vr.attendance = 1
		AND (start_time >= #{startTime} 
		AND date_add(#{endTime}, interval +1 day) >= start_time)
		AND m.is_confirmed = 1
	
	</select>
	
	<!-- S006: 일정 수정 -->
	<update id="updateMatchSchedule" parameterType="matchSchedule">
		UPDATE match_schedule
		<set>
			<if test="startTime != null">
				`start_time` = #{startTime},
			</if>
			<if test="duration != 0">
				`duration` = #{duration},
			</if>
			<if test="cost != -1">
				`cost` = #{cost},
			</if>
			<if test="writer != null">
				`writer` = #{writer},
			</if>
			<if test="regDate != null">
				`reg_date` = #{regDate},
			</if>
			<if test="content != null">
				`content` = #{content},
			</if>
			<if test="stadiumName != null">
				`stadium_name` = #{stadiumName},
			</if>
			<if test="stadiumType != null">
				`stadium_type` = #{stadiumType},
			</if>
			<if test="stadiumAddress != null">
				`stadium_address` = #{stadiumAddress},
			</if>
			<if test="stadiumX != 0">
				`stadium_x` = #{stadiumX},
			</if>
			<if test="stadiumX != 0">
				`stadium_y` = #{stadiumY},
			</if>
			<if test="stadiumParking != -1">
				`stadium_parking` = #{stadiumParking},
			</if>
			<if test="stadiumParking != -1">
				`stadium_shower` = #{stadiumShower},
			</if>
			<if test="matchType != null">
				`match_type` = #{matchType},
			</if>
			<if test="isConfirmed != -1">
				`is_confirmed` = #{isConfirmed},
			</if>
		</set>
		WHERE `match_schedule_id` = #{matchScheduleId}
	</update>
	
	<!-- S007 -->
	<!-- 참여 누른 맴버들 불러오기 -->
	<select id="showAttendVotedMember" parameterType="hashMap" resultType="teamMember">
		SELECT 
		tm.team_member_id, tm.nick_name
		FROM vote_match v
		JOIN vote_match_result vr
		ON v.vote_match_id = vr.vote_match_id
		JOIN team_member tm
		ON tm.team_member_id = vr.team_member_id
		WHERE v.match_schedule_id = #{matchScheduleId}
		AND v.team_id = #{teamId}
		AND vr.attendance = 1
		AND tm.team_member_id is not null
	</select>
	
	<!-- S008 -->
	<!-- 참여하기로 한 지인 불러오기 -->
	<select id="showAttendVotedFriend" parameterType="hashMap" resultType="user">
		SELECT 
		u.email, u.name
		FROM vote_match_result vr
		JOIN vote_match v
		ON v.vote_match_id = vr.vote_match_id
		JOIN user u
		ON u.email = vr.email
		WHERE v.match_schedule_id = #{matchScheduleId}
		AND v.team_id = #{teamId}
		AND vr.attendance = 1
		AND u.email is not null
	</select>
	<!-- 참여하기로 한 용병 불러오기 -->
	<select id="showAcceptedEmploy" parameterType="integer" resultType="user">
		SELECT 
		u.email, u.name
		FROM employ e
		JOIN employ_result er
		ON e.employ_id = er.employ_id
		JOIN user u
		ON u.email = er.email
		WHERE e.match_schedule_id = #{value}
		AND er.emp_result_status = 1
	</select>
	
	<!-- S009 -->
	<!-- entry 입력 -->
	<insert id="addEntry" parameterType="entry">
		INSERT INTO
		entry(team_member_id, match_schedule_id, email, attendance, type, match_score, goal, assist, team_id)
		VALUES(#{teamMember.teamMemberId}, #{matchSchedule.matchScheduleId}, #{user.email},
		#{attendance}, #{type}, #{matchScore}, #{goal}, #{assist}, #{team.teamId})
	</insert>
	<!-- matchResult 입력 -->
	<insert id="addMatchResult" parameterType="matchResult">
		INSERT INTO
		match_result(is_set, home_result, away_result, home_score, away_score, match_schedule_id)
		VALUES(#{isSet}, #{homeResult}, #{awayResult}, #{homeScore}, #{awayScore}, #{matchSchedule.matchScheduleId})
	</insert>
	<!-- empScore 입력 -->
	<insert id="addEmpScore" parameterType="empScore">
		INSERT INTO
		emp_score(manner_promise, manner_contact, manner_rule, manner_body_fight, manner_slang, manner_smoking,
		 manner_uniform, manner_payment, manner_arrangement, manner_referee, manner_tackle, 
		 forward, middle, defence, match_schedule_id, team_giver_id, emp_email)
		VALUE(#{mannerPromise},#{mannerContact},#{mannerRule},#{mannerBodyFight},#{mannerSlang},#{mannerSmoking},
		#{mannerUniform},#{mannerPayment},#{mannerArrangement},#{mannerReferee},#{mannerTackle},
		#{forward},#{middle},#{defence},#{matchSchedule.matchScheduleId},
		#{teamGiver.teamId},#{user.email})
	</insert>
	<!-- teamScore 입력 -->
	<insert id="addTeamScore" parameterType="teamScore">
		INSERT INTO
		team_score(manner_promise, manner_contact, manner_rule, manner_body_fight, manner_slang, manner_smoking, 
		manner_uniform, manner_payment, manner_arrangement, manner_referee, manner_tackle,
		 forward, middle, defence, team_taker_id, match_schedule_id, team_giver_id, emp_email)
		VALUES(#{mannerPromise},#{mannerContact},#{mannerRule},#{mannerBodyFight},#{mannerSlang},#{mannerSmoking},
		#{mannerUniform},#{mannerPayment},#{mannerArrangement},#{mannerReferee},#{mannerTackle},
		#{forward},#{middle},#{defence},#{teamTaker.teamId},#{matchSchedule.matchScheduleId},
		#{teamGiver.teamId},#{user.email})
	</insert>
	<!-- awayTeam 확인 -->
	<select id="checkAwayTeam" parameterType="integer" resultType="integer">
		SELECT 
		ifnull(away_team_id, 0)
		FROM match_schedule
		WHERE match_schedule_id = #{value}
	</select>
	
	<!-- S010 -->
	<resultMap type="matchSchedule" id="matchScheduleRM">
		<id column="match_schedule_id" property="matchScheduleId"/>
		<result column="start_time" property="startTime"/>
		<result column="end_time" property="endTime"/>
		<result column="duration" property="duration"/>
		<result column="cost" property="cost"/>
		<result column="writer" property="writer"/>
		<result column="regDate" property="regDate"/>
		<result column="stadium_name" property="stadiumName"/>
		<result column="stadium_type" property="stadiumType"/>
		<result column="stadium_address" property="stadiumAddress"/>
		<result column="stadium_x" property="stadiumX"/>
		<result column="stadium_y" property="stadiumY"/>
		<result column="stadium_parking" property="stadiumParking"/>
		<result column="stadium_shower" property="stadiumShower"/>
		<result column="match_type" property="matchType"/>
		<result column="is_confirmed" property="isConfirmed"/>
		<association property="homeTeam" javaType="team">
			<id column="home_team_id" property="teamId"/>
			<result column="home_emblem" property="emblem"/>
			<result column="home_team_name" property="teamName"/>
		</association>
		<association property="awayTeam" javaType="team">
			<id column="away_team_id" property="teamId"/>
			<result column="away_emblem" property="emblem"/>
			<result column="away_team_name" property="teamName"/>
		</association>
		<association property="matchResult" javaType="matchResult">
			<id column="match_schedule_id" property="matchScheduleId"/>
			<result column="home_score" property="homeScore"/>
			<result column="away_score" property="awayScore"/>
		</association>
		<collection property="entries" javaType="list" ofType="entry">
			<id column="entry_id" property="entryId"/>
			<result column="attendance" property="attendance"/>
			<result column="type" property="type"/>
			<result column="match_score" property="matchScore"/>
			<result column="goal" property="goal"/>
			<result column="assist" property="assist"/>
			<association property="team" javaType="team">
				<id column="ent_team_id" property="teamId"/>
			</association>
			<association property="user" javaType="user">
				<id column="email" property="email"/>
				<collection property="empScores" javaType="list" ofType="empScore">
					<id column="emp_score_id" property="empScoreId"/>
					<result column="manner_promise_e" property="mannerPromise"/>
					<result column="manner_contact_e" property="mannerContact"/>
					<result column="manner_rule_e" property="mannerRule"/>
					<result column="manner_body_fight_e" property="mannerBodyFight"/>
					<result column="manner_slang_e" property="mannerSlang"/>
					<result column="manner_smoking_e" property="mannerSmoking"/>
					<result column="manner_uniform_e" property="mannerUniform"/>
					<result column="manner_payment_e" property="mannerPayment"/>
					<result column="manner_arrangement_e" property="mannerArrangement"/>
					<result column="manner_referee_e" property="mannerReferee"/>
					<result column="manner_tackle_e" property="mannerTackle"/>
					<result column="forward_e" property="forward"/>
					<result column="middle_e" property="middle"/>
					<result column="defence_e" property="defence"/>
				</collection>
			</association>
			<association property="teamMember" javaType="teamMember">
				<id column="team_member_id" property="teamMemberId"/>
				<result column="nick_name" property="nickName"/>
			</association>
		</collection>
		<collection property="teamScores" javaType="list" ofType="teamScore">
			<id column="team_score_id" property="teamScoreId"/>
			<result column="manner_promise" property="mannerPromise"/>
			<result column="manner_contact" property="mannerContact"/>
			<result column="manner_rule" property="mannerRule"/>
			<result column="manner_body_fight" property="mannerBodyFight"/>
			<result column="manner_slang" property="mannerSlang"/>
			<result column="manner_smoking" property="mannerSmoking"/>
			<result column="manner_uniform" property="mannerUniform"/>
			<result column="manner_payment" property="mannerPayment"/>
			<result column="manner_arrangement" property="mannerArrangement"/>
			<result column="manner_referee" property="mannerReferee"/>
			<result column="manner_tackle" property="mannerTackle"/>
			<result column="forward" property="forward"/>
			<result column="middle" property="middle"/>
			<result column="defence" property="defence"/>
			<association property="teamTaker" javaType="team">
				<id column="team_taker_id" property="teamId"/>
			</association>
			<association property="teamGiver" javaType="team">
				<id column="team_giver_id" property="teamId"/>
				<result column="team_giver_name" property="teamName"/>
			</association>
			<association property="user" javaType="user">
				<id column="emp_email" property="email"/>			
			</association>
		</collection>
	</resultMap>
	<sql id="matchScheduleColumn">
		m.match_schedule_id, m.start_time, m.duration, m.cost, m.writer, m.reg_date, m.content, m.stadium_name, 
		m.stadium_type, m.stadium_address, m.stadium_x, m.stadium_y, m.stadium_parking, m.stadium_shower, 
		m.match_type, m.home_team_id, m.away_team_id, m.is_confirmed,
		date_add(m.start_time, interval m.duration hour) end_time
	</sql>
	<sql id="homeTeamColumn">
		t.team_id home_team_id, t.emblem home_emblem, t.team_name home_team_name
	</sql>
	<sql id="awayTeamColumn">
		t2.team_id away_team_id, t2.emblem away_emblem, t2.team_name away_team_name
	</sql>
	<sql id="entryColumn">
		ent.entry_id, ent.email, ent.attendance, ent.type, ent.match_score, ent.goal, ent.assist,
		ent.team_id ent_team_id
	</sql>
	<sql id="entryTeamMemberColumn">
		tm.team_member_id, tm.nick_name
	</sql>
	<sql id="teamScoreColumn">
		ts.team_score_id,
		ts.manner_promise, ts.manner_contact, ts.manner_rule, ts.manner_body_fight, ts.manner_slang, 
		ts.manner_smoking, ts.manner_uniform, ts.manner_payment,
		ts.manner_arrangement, ts.manner_referee, ts.manner_tackle, ts.forward, ts.middle, 
		ts.defence, ts.emp_email, ts.team_taker_id
	</sql>
	<sql id="scoreGiverTeamColumn">
		t3.team_id team_giver_id, t3.team_name team_giver_name
	</sql>
	<sql id="matchResultColumn">
		mr.home_score, mr.away_score
	</sql>
	<!-- S010: 팀별/개인별 완료된 경기 일정 출력 -->
	<select id="showMatchScheduleResult" parameterType="hashMap" resultMap="matchScheduleRM">
		SELECT
		<include refid="matchScheduleColumn"/>,
		<include refid="homeTeamColumn"/>,
		<include refid="awayTeamColumn"/>,
		<include refid="entryColumn"/>,
		<include refid="entryTeamMemberColumn"/>,
		<include refid="teamScoreColumn"/>,
		<include refid="scoreGiverTeamColumn"/>,
		<include refid="matchResultColumn"/>
		FROM match_schedule m
		JOIN team t
		ON t.team_id = m.home_team_id
		LEFT OUTER JOIN team t2
		ON t2.team_id = m.away_team_id
		LEFT OUTER JOIN entry ent
		ON ent.match_schedule_id = m.match_schedule_id
		LEFT OUTER JOIN team_member tm
		ON ent.team_member_id = tm.team_member_id
		LEFT OUTER JOIN team_score ts
		ON ts.match_schedule_id = m.match_schedule_id
		LEFT OUTER JOIN team t3
		ON t3.team_id = ts.team_giver_id
		LEFT OUTER JOIN match_result mr
		ON mr.match_schedule_id = m.match_schedule_id
		WHERE m.match_schedule_id = #{matchScheduleId}
	</select>
	
	<!-- S011 -->
	<!-- :homeTeam 변경 -->
	<update id="changeHomeTeam" parameterType="hashMap">
		UPDATE match_schedule
		SET home_team_id = #{takerTeamId}
		WHERE match_schedule_id = #{matchScheduleId}
	</update>
	
	<!-- S012: 일정 삭제 -->
	<delete id="deleteMatchSchedule" parameterType="integer">
		DELETE
		FROM match_schedule
		WHERE match_schedule_id = #{value}
	</delete>
	
	<!-- S013: 경기 확정하기 -->
	<update id="confirmMatchSchedule" parameterType="hashMap">
		UPDATE match_schedule
		SET is_confirmed = 1
		<if test="teamId != 0">
			,away_team_id = #{teamId}
		</if>
		WHERE match_schedule_id = #{matchScheduleId}
	</update>
	
	<!-- S014: 팀별 평균 매너, 실력, 부여받은 횟수 출력 -->
	<select id="getTeamScoreDesc" parameterType="integer" resultType="team">
		SELECT
		t.team_id, t.team_ability, t.team_manner,
		count(ts.team_taker_id) totalRatedNum
		FROM team t
		LEFT OUTER JOIN team_score ts
		ON t.team_id = ts.team_taker_id
		WHERE t.team_id = #{value}
		GROUP BY ts.team_taker_id
	</select>
	
	<!-- S015: 팀 평균 매너, 실력 수정 -->
	<update id="updateTeamScoreDesc" parameterType="ScoreDescInput">
		UPDATE team
		SET team_ability = #{teamAbility},
		team_manner = #{teamManner}
		WHERE team_id = #{teamId}
	</update>
	
	<!-- S016: 개인별 평균 매너, 실력, 부여받은 횟수 출력 -->
	<select id="getEmpScoreDesc" parameterType="string" resultType="user">
		SELECT
		u.email, u.emp_ability, u.emp_manner,
		count(es.emp_email) totalRatedNum
		FROM user u
		LEFT OUTER JOIN emp_score es
		ON u.email = es.emp_email
		WHERE u.email = #{value}
		GROUP BY es.emp_email
	</select>
	
	<!-- S017: 개인 평균 매너, 실력 수정 -->
	<update id="updateEmpScoreDesc" parameterType="ScoreDescInput">
		UPDATE user
		SET emp_ability = #{empAbility},
		emp_manner = #{empManner}
		WHERE email = #{email}
	</update>
	
	<!-- S018: 특정 팀의 경기 결과, 부여 점수들 불러오기 -->
	<select id="getEmpScoreByScheduleIdEmail" parameterType="hashMap" resultType="empScore">
		SELECT
		emp_score_id, manner_promise, manner_contact, manner_rule, manner_body_fight, manner_slang, manner_smoking, 
		manner_uniform, manner_payment, manner_arrangement, manner_referee, manner_tackle, forward, middle, defence, 
		match_schedule_id, team_giver_id, emp_email
		FROM emp_score
		WHERE match_schedule_id = #{matchScheduleId}
		AND team_giver_id = #{teamId}
		AND emp_email = #{email}
	</select>
	
	<!-- S019: 경기결과 수정 -->
	<!-- entry -->
	<update id="updateEntry" parameterType="entry">
		UPDATE entry
		SET
		attendance = #{attendance},
		type = #{type},
		match_score = #{matchScore},
		goal = #{goal},
		assist = #{assist}
		WHERE entry_id = #{entryId}
	</update>
	<!-- matchResult -->
	<update id="updateMatchResult" parameterType="matchResult">
		UPDATE match_result
		SET
		`is_set` = #{isSet},
		`home_result` = #{homeResult},
		`away_result` = #{awayResult},
		`home_score` = #{homeScore},
		`away_score` = #{awayScore}
		WHERE `match_schedule_id` = #{matchScheduleId}
	</update>
	<!-- empScore -->
	<update id="updateEmpScore" parameterType="empScore">
		UPDATE emp_score
		SET
		manner_promise = #{mannerPromise},
		manner_contact = #{mannerContact},
		manner_rule = #{mannerRule},
		manner_body_fight = #{mannerBodyFight},
		manner_slang = #{mannerSlang},
		manner_smoking = #{mannerSmoking},
		manner_uniform = #{mannerUniform},
		manner_payment = #{mannerPayment},
		manner_arrangement = #{mannerArrangement},
		manner_referee = #{mannerReferee},
		manner_tackle = #{mannerTackle},
		forward = #{forward},
		middle = #{middle},
		defence = #{defence}
		WHERE emp_score_id = #{empScoreId}
	</update>
	<!-- teamScore -->
	<update id="updateTeamScore" parameterType="teamScore">
		UPDATE team_score
		SET
		`manner_promise` = #{mannerPromise},
		`manner_contact` = #{mannerContact},
		`manner_rule` = #{mannerRule},
		`manner_body_fight` = #{mannerBodyFight},
		`manner_slang` = #{mannerSlang},
		`manner_smoking` = #{mannerSmoking},
		`manner_uniform` = #{mannerUniform},
		`manner_payment` = #{mannerPayment},
		`manner_arrangement` = #{mannerArrangement},
		`manner_referee` = #{mannerReferee},
		`manner_tackle` = #{mannerTackle},
		`forward` = #{forward},
		`middle` = #{middle},
		`defence` = #{defence}
		WHERE `team_score_id` = #{teamScoreId}
	</update>
	
	<!-- S020: 받은 팀의 평균 점수 -->
	<select id="getAvgTeamScore" parameterType="integer" resultType="avgScore">
		SELECT
		avg(manner_promise) manner_promise, avg(manner_contact) manner_contact, avg(manner_rule) manner_rule, 
		avg(manner_body_fight) manner_body_fight, avg(manner_slang) manner_slang, avg(manner_smoking) manner_smoking,
		avg(manner_uniform) manner_uniform, avg(manner_payment) manner_payment, avg(manner_arrangement) manner_arrangement, 
		avg(manner_referee) manner_referee, avg(manner_tackle) manner_tackle, avg(forward) forward, avg(middle) middle, avg(defence) defence
		FROM team_score
		WHERE team_taker_id = #{value}
		GROUP BY team_taker_id
	</select>
	
	<!-- S021: 받은 용병의 평균 점수 -->
	<select id="getAvgEmpScore" parameterType="string" resultType="avgScore">
		SELECT
		avg(manner_promise) manner_promise, avg(manner_contact) manner_contact, avg(manner_rule) manner_rule, 
		avg(manner_body_fight) manner_body_fight, avg(manner_slang) manner_slang, avg(manner_smoking) manner_smoking,
		avg(manner_uniform) manner_uniform, avg(manner_payment) manner_payment, avg(manner_arrangement) manner_arrangement, 
		avg(manner_referee) manner_referee, avg(manner_tackle) manner_tackle, avg(forward) forward, avg(middle) middle, avg(defence) defence
		FROM emp_score
		WHERE emp_email = #{value}
		GROUP BY emp_email
	</select>
	
	<!-- S022: 향후 경기일정 가져오기 -->
	<select id="showFutureSchedule" parameterType="integer" resultMap="matchScheduleRM">
		SELECT
		<include refid="matchScheduleColumn"/>,
		t1.team_name home_team_name, t1.emblem home_emblem,
		t2.team_name away_team_name, t2.emblem away_emblem
		FROM match_schedule m
		JOIN team t1
		ON t1.team_id = m.home_team_id
		JOIN team t2
		ON t2.team_id = m.away_team_id
		WHERE is_confirmed = 1
		AND start_time > sysdate()
		AND #{teamId} in (home_team_id, away_team_id)
		ORDER BY start_time ASC
		LIMIT 5
	</select>
</mapper>